<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tls="http://www.mulesoft.org/schema/mule/tls"
	xmlns:cors="http://www.mulesoft.org/schema/mule/cors" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/cors http://www.mulesoft.org/schema/mule/cors/current/mule-cors.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd">

	<http:listener-config name="HTTPS_Listener_Configuration"
		host="0.0.0.0" port="${https.port}" doc:name="HTTP Listener Configuration"
		protocol="HTTPS">
		<tls:context>
			<tls:key-store type="jks" path="${keystore.location}"
				keyPassword="${key.password}" password="${keystore.password}" alias="${key.alias}" />
		</tls:context>
	</http:listener-config>
	<http:request-config name="Call_Send_API_Request_Configuration"
		protocol="HTTPS" host="graph.facebook.com" port="443"
		doc:name="HTTP Request Configuration" basePath="/">
		<tls:context>
			<tls:key-store type="jks" path="${keystore.location}"
				keyPassword="${key.password}" password="${keystore.password}" alias="${key.alias}" />
		</tls:context>
	</http:request-config>

	<http:request-config name="Omnichannel_Request_Configuration"
		doc:name="HTTP Request Configuration" host="${omni-experience-api.host}"
		port="${omni-experience-api.port}" basePath="${omni-experience-api.baseUrl}" />

	<context:property-placeholder
		location="common.properties,mule.${mule.env}.properties" />

	<objectstore:config name="application_data"
		partition="_defaultUserObjectStore" objectStore-ref="_defaultUserObjectStore"
		doc:name="ObjectStore: Connector" persistent="true" />


	<configuration doc:name="Configuration">
		<expression-language>
			<global-functions>
				def decode64(value) {
				byte[] decoded = java.util.Base64.getUrlDecoder()
				.decode(value);
				return new String(decoded, "UTF-8");
				}

				def encode64(value) {
				return java.util.Base64.getUrlEncoder()
				.withoutPadding()
				.encodeToString(value.getBytes("UTF-8"));
				}

				def toUrlSafeCustomerId(value) {
				return value.replace('|', '_');
				}
			</global-functions>
		</expression-language>
	</configuration>

	<cors:config name="Cors_Configuration" doc:name="Cors Configuration">
		<cors:origins>
			<cors:origin url="*" accessControlMaxAge="30">
				<cors:methods>
					<cors:method>GET</cors:method>
					<cors:method>POST</cors:method>
					<cors:method>OPTIONS</cors:method>
				</cors:methods>
				<!-- <cors:headers> -->
				<!-- <cors:header>Origin</cors:header> -->
				<!-- </cors:headers> -->
			</cors:origin>
		</cors:origins>
	</cors:config>

	<flow name="webhook-flow">
		<http:listener config-ref="HTTPS_Listener_Configuration"
			path="/webhook" doc:name="/webhook" />
		<logger message="#[message.payloadAs(java.lang.String)]" level="DEBUG"
			doc:name="Log webhook input" />
		<choice doc:name="Operation?">
			<when expression="#[message.inboundProperties.'http.method' == 'POST']">
				<dw:transform-message doc:name="transform input to java">
					<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>

				</dw:transform-message>
				<choice doc:name="Choice">
					<when expression="#[!(payload.entry[0].messaging[0].message == null)]">

						<choice doc:name="What action to perform?">
							<when
								expression="#[payload.entry[0].messaging[0].message.text.contains(&quot;order&quot;)]">

								<flow-ref name="order-response" doc:name="order-response" />
							</when>
							<when
								expression="#[payload.entry[0].messaging[0].message.text.contains(&quot;Hi&quot;)]">

								<flow-ref name="greeting-response" doc:name="greeting-response" />
							</when>
                            <when expression="#[payload.entry[0].messaging[0].message.text.contains(&quot;user&quot;)]">
                                <flow-ref name="logout-response" doc:name="logout-response"/>
                            </when>

							<otherwise>

								<flow-ref name="echo-response" doc:name="echo-response" />
							</otherwise>
						</choice>
						<logger message="#[payload:java.lang.String]" level="DEBUG"
							doc:name="Log message to FB" />
						<http:request config-ref="Call_Send_API_Request_Configuration"
							path="me/messages" method="POST" doc:name="Call Facebook Send API">
							<http:request-builder>
								<http:query-param paramName="access_token"
									value="${access_token}" />
							</http:request-builder>
						</http:request>
						<logger message="#[payload:java.lang.String]" level="DEBUG"
							doc:name="Log FB response" />
					</when>
					<otherwise>
						<logger message="POSTBACK - #[payload]" level="DEBUG"
							doc:name="Logger" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<set-payload
					value="#[message.inboundProperties.'http.query.params'.['hub.challenge']]"
					doc:name=" Respond with challenge" />
			</otherwise>
		</choice>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <json:object-to-json-transformer doc:name="Object to JSON"/>
            <dw:transform-message doc:name="Error_Response Message">
                <dw:input-payload mimeType="application/json"/>
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	recipient: {
		id: payload.entry.messaging[0].sender.id[0]
	},
	message: {
		text: "There was an error with your request, please review your user configuration on the Anypoint Store."
	}
}]]></dw:set-payload>
            </dw:transform-message>
            <http:request config-ref="Call_Send_API_Request_Configuration" path="me/messages" method="POST" doc:name="Call Facebook Send API">
                <http:request-builder>
                    <http:query-param paramName="access_token" value="${access_token}"/>
                </http:request-builder>
            </http:request>
        </catch-exception-strategy>

	</flow>
	<flow name="after-login-flow">
		<http:listener config-ref="HTTPS_Listener_Configuration"
			path="/callback" doc:name="HTTP" allowedMethods="GET,OPTIONS,POST" />
		<cors:validate config-ref="Cors_Configuration"
			publicResource="true" acceptsCredentials="false" doc:name="CORS Validate" />
		<json:json-to-object-transformer
			returnClass="java.util.Map" doc:name="JSON to Object" mimeType="application/java" />
		<dw:transform-message doc:name="extract useful data">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java
%var accessTokenPayloadBase64UrlEncoded = (payload.access_token splitBy '.')[1]
%var accessTokenPayloadString = decode64(accessTokenPayloadBase64UrlEncoded)
%var accessTokenPayload = read(accessTokenPayloadString, 'application/json')

%var idTokenPayloadBase64UrlEncoded = (payload.id_token splitBy '.')[1]
%var idTokenPayloadString = decode64(idTokenPayloadBase64UrlEncoded)
%var idTokenPayload = read(idTokenPayloadString, 'application/json')
---
{
	customerId: toUrlSafeCustomerId(accessTokenPayload.sub),
	psid: read(decode64(payload.state), 'application/json').psid,
	action: read(decode64(payload.state), 'application/json').action,
	accessToken: payload.access_token,
	name: idTokenPayload.name,
	givenName: idTokenPayload.given_name,
	lastName: idTokenPayload.family_name
	
}]]></dw:set-payload>
		</dw:transform-message>
		<objectstore:store config-ref="application_data"
			key="#[payload.psid]" value-ref="#[dw(' payload - &quot;action&quot; ')]"
			overwrite="true" doc:name="save customerId under psid key" />
		<set-variable variableName="customerData" value="#[payload]"
			doc:name="Set customerData" />
		<choice doc:name="Choose action after login">
			<when expression="#[payload.action.equals(&quot;order&quot;)]">
				<logger message="#[message.payloadAs(java.lang.String)]"
					level="DEBUG" doc:name="Find real order info as we now have customerId" />
				<dw:transform-message doc:name="Prepare message to send to FB">
					<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	recipient: {
		id: payload.psid
	},
	message: {
		text: "Thank you for linking your account, let me now show you your last order..."
	}
}]]></dw:set-payload>
				</dw:transform-message>
				<http:request config-ref="Call_Send_API_Request_Configuration"
					path="me/messages" method="POST" doc:name="Call Facebook Send API">
					<http:request-builder>
						<http:query-param paramName="access_token" value="${access_token}" />
					</http:request-builder>
				</http:request>
				<flow-ref name="create-orders-response" doc:name="create-orders-response" />
			</when>
			<otherwise>
				<dw:transform-message doc:name="Prepare logged in message">
					<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	recipient: {
		id: payload.psid
	},
	message: {
		text: "Thank you for linking your account! Is there anything I can help you with?"
	}
}]]></dw:set-payload>
				</dw:transform-message>
				<http:request config-ref="Call_Send_API_Request_Configuration"
					path="me/messages" method="POST" doc:name="Call Facebook Send API">
					<http:request-builder>
						<http:query-param paramName="access_token" value="${access_token}" />
					</http:request-builder>
				</http:request>
			</otherwise>
		</choice>

	</flow>
	<flow name="echo-response">
		<json:object-to-json-transformer
			doc:name="Object to JSON" />
		<dw:transform-message doc:name="Response Message">
			<dw:input-payload mimeType="application/json" />
			<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	recipient: {
		id: payload.entry.messaging[0].sender.id[0]
	},
	message: {
		text: "You can ask for your last order or for authenticating a different user." when payload.entry.messaging[0].message.text[0] !=null otherwise 'No Message'
	}
}]]></dw:set-payload>
		</dw:transform-message>
	</flow>
	<flow name="greeting-response">
		<json:object-to-json-transformer
			doc:name="Object to JSON" />
		<dw:transform-message doc:name="Response Message">
			<dw:input-payload mimeType="application/json" />
			<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	recipient: {
		id: payload.entry.messaging[0].sender.id[0]
	},
	message: {
		text: "Hi, How can we help you today?" when payload.entry.messaging[0].message.text[0] !=null otherwise 'No Message'
	}
}]]></dw:set-payload>
		</dw:transform-message>
	</flow>

	<flow name="create-orders-response">
		<http:request config-ref="Omnichannel_Request_Configuration"
			path="/customers/{customerId}/orders" method="GET"
			doc:name="GET /customers/{customerId}/orders">
			<http:request-builder>
				<http:uri-param paramName="customerId"
					value="#[flowVars.customerData.customerId]" />
			</http:request-builder>
		</http:request>
		<dw:transform-message doc:name="Transform to Object">
			<dw:input-payload mimeType="application/json"/>
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
		</dw:transform-message>
		<set-variable variableName="ordersSize" value="#[payload.toArray().length]"
			doc:name="Set ordersSize" />
		<choice doc:name="Is there placed order?">
			<when expression="#[flowVars.ordersSize &gt; 0]">
                <dw:transform-message doc:name="Extract data about last order">
                    <dw:input-payload mimeType="application/java"/>
                    <dw:set-variable variableName="lastOrder"><![CDATA[%dw 1.0
%output application/java
---
using(last = payload[0]){
	orderId: last.orderId,
    customerId: last.customerId,
    subtotal: last.subtotal as :number,
    shippingCost: last.shippingCost as :number,
    totalTax: last.totalTax as :number,
    total: last.total as :number,
    orderItems: last.orderItems,
    shippingAddress: last.shippingAddress 
}]]></dw:set-variable>
                </dw:transform-message>
				<flow-ref name="list-response" doc:name="list-response" />
				<flow-ref name="prepare-order-response" doc:name="prepare-order-response" />

			</when>
			<otherwise>
				<dw:transform-message doc:name="Response Message">
					<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	recipient: {
		id: flowVars.customerData.psid
	},
	message: {
		  
	      text: 
	      		"\nYou have no active orders. If you want to check for another user, please let me know."
	}
}]]></dw:set-payload>
				</dw:transform-message>
			</otherwise>
		</choice>

		<http:request config-ref="Call_Send_API_Request_Configuration"
			path="me/messages" method="POST" doc:name="Call Facebook Send API">
			<http:request-builder>
				<http:query-param paramName="access_token" value="${access_token}" />
			</http:request-builder>
		</http:request>

	</flow>
<flow name="prepare-order-response">

		<dw:transform-message doc:name="check orderItems and set variables partners, stores, listPartners, listStores, listItems">
			<dw:input-payload mimeType="application/json"/>
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
false when (flowVars.lastOrder.orderItems.shipmentItems == null and flowVars.lastOrder.orderItems.partnersItems == null)   
	otherwise true	]]></dw:set-payload>
            <dw:set-variable variableName="listItems"><![CDATA[%dw 1.0
%output application/java
---
[]]]></dw:set-variable>

            <dw:set-variable variableName="partners"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.lastOrder.orderItems.partnersItems map {
	locationId: $.locationId 
} distinctBy $.locationId) 
when (flowVars.lastOrder.orderItems.partnersItems != null)
otherwise null]]></dw:set-variable>
            <dw:set-variable variableName="stores"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.lastOrder.orderItems.pickupItems map {
	locationId: $.locationId 
} distinctBy $.locationId) 
when (flowVars.lastOrder.orderItems.pickupItems != null)
otherwise null]]></dw:set-variable>
            <dw:set-variable variableName="listPartners"><![CDATA[%dw 1.0
%output application/java
---
[]]]></dw:set-variable>
            <dw:set-variable variableName="listStores"><![CDATA[%dw 1.0
%output application/java
---
[]]]></dw:set-variable>
		</dw:transform-message>
        <foreach collection="#[flowVars.partners]" doc:name="For Each Partner">
            <http:request config-ref="Omnichannel_Request_Configuration" path="/partners/{partnerId}" method="GET" doc:name="GET/partners/{partnerId}">
                <http:request-builder>
                    <http:uri-param paramName="partnerId" value="#[payload.locationId]"/>
                </http:request-builder>
            </http:request>

            <dw:transform-message doc:name="Add Partner to List and update shippingPrice">
                <dw:set-variable variableName="listPartners"><![CDATA[%dw 1.0
%output application/java
---
flowVars.listPartners + payload]]></dw:set-variable>


            </dw:transform-message>
        </foreach>
        <foreach collection="#[flowVars.stores]" doc:name="For Each Store">
            <http:request config-ref="Omnichannel_Request_Configuration" path="/stores/{storeId}" method="GET" doc:name="GET/stores/{storeId}">
                <http:request-builder>
                    <http:uri-param paramName="storeId" value="#[payload.locationId]"/>
                </http:request-builder>
            </http:request>
            <dw:transform-message doc:name="Add Store to list">
                <dw:set-variable variableName="listStores"><![CDATA[%dw 1.0
%output application/java
---
flowVars.listStores + payload]]></dw:set-variable>
            </dw:transform-message>
        </foreach>



		<choice doc:name="Are Shipment and Partners items available?">
			<when expression="#[payload == true]">
				<http:request config-ref="Omnichannel_Request_Configuration"
					path="customers/{customerId}" method="GET" doc:name="GET/customers/{customerId}">
					<http:request-builder>
						<http:uri-param paramName="customerId"
							value="#[flowVars.lastOrder.customerId]" />
					</http:request-builder>
				</http:request>
				<dw:transform-message doc:name="set recipient">
					<dw:input-payload mimeType="application/json" />
                    <dw:set-variable variableName="recipient"><![CDATA[%dw 1.0
%output application/java
---
payload.firstName ++ " " ++ payload.lastName]]></dw:set-variable>

				</dw:transform-message>
                <foreach collection="#[flowVars.lastOrder.orderItems.partnersItems]" doc:name="For Each Partner Item">

                    <dw:transform-message doc:name="Add item to listItems">
                        <dw:set-variable variableName="listItems"><![CDATA[%dw 1.0
%output application/java
---
flowVars.listItems + {
	productId: payload.productId,
	variantId: payload.orderItemId,
	productName: payload.productName,
	quantity: payload.quantity as :number,
	price: payload.price as :number,
	(flowVars.listPartners filter ($.partnerId == payload.locationId) map {
		locationDetails: "Shipped from Partner " ++ $.name ++ " to your address"
		 
})}]]></dw:set-variable>
                    </dw:transform-message>
                </foreach>
                <foreach collection="#[flowVars.lastOrder.orderItems.pickupItems]" doc:name="For Each Pickup item">
                    <dw:transform-message doc:name="Add item to listItems">
                        <dw:set-variable variableName="listItems"><![CDATA[%dw 1.0
%output application/java
---
flowVars.listItems + {
	productId: payload.productId,
	variantId: payload.orderItemId,
	productName: payload.productName,
	quantity: payload.quantity as :number,
	price: payload.price as :number,
	(flowVars.listStores filter ($.storeId == payload.locationId) map {
		locationDetails: "Pick up in: " ++ $.name ++ ", " ++ $.address.streetLine1 ++ ", " ++ $.address.city	 
})}
	
]]></dw:set-variable>
                    </dw:transform-message>
                </foreach>
                <foreach collection="#[flowVars.lastOrder.orderItems.shipmentItems]" doc:name="For Each Shipment Item">
                    <dw:transform-message doc:name="Add item to listItems">
                        <dw:set-variable variableName="listItems"><![CDATA[%dw 1.0
%output application/java
---
flowVars.listItems + {
	productId: payload.productId,
	variantId: payload.orderItemId,
	productName: payload.productName,
	quantity: payload.quantity as :number,
	price: payload.price as :number,
	locationDetails: "Shipped to your address"
}]]></dw:set-variable>
                    </dw:transform-message>
                </foreach>


				<dw:transform-message doc:name="Response Message">
					<dw:input-payload mimeType="application/java" />
					<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
  recipient:{
    id: flowVars.customerData.psid
  },
  message:{
    attachment:{
      type:"template",
      payload:{
        template_type: "receipt",
        recipient_name: flowVars.recipient,
        order_number:flowVars.lastOrder.orderId,
        currency:"USD",
        payment_method:"Anypoint Bank",             
        address:{
          street_1: flowVars.lastOrder.shippingAddress.address,
          city: flowVars.lastOrder.shippingAddress.city,
          postal_code:flowVars.lastOrder.shippingAddress.postalCode,
          state: upper flowVars.lastOrder.shippingAddress.state[0..1],
          country: upper flowVars.lastOrder.shippingAddress.country[0..1]
        },
        summary:{
          subtotal: flowVars.lastOrder.subtotal,
          shipping_cost: flowVars.lastOrder.shippingCost,
          total_tax: flowVars.lastOrder.totalTax,
          total_cost: flowVars.lastOrder.total
        },
        elements: flowVars.listItems map
          {
            title: $.productName,
            subtitle: $.locationDetails,
            quantity: $.quantity, 
            price: $.price, 
            currency: "USD"
          }
      }
    }
  }
}]]></dw:set-payload>
				</dw:transform-message>
			</when>
			<otherwise>
				<logger message="Order only for PICKUP" level="INFO"
					doc:name="Only Pickup items" />

				<foreach collection="#[flowVars.lastOrder.orderItems.pickupItems]"
					doc:name="For Each Pickup Item">

					<dw:transform-message doc:name="Add item to listItems">
						<dw:set-variable variableName="listItems"><![CDATA[%dw 1.0
%output application/java
---
flowVars.listItems + {
	productId: payload.productId,
	variantId: payload.orderItemId,
	productName: payload.productName,
	quantity: payload.quantity as :number,
	price: payload.price as :number,
	(flowVars.listStores filter ($.storeId == payload.locationId) map {
		locationDetails: "Pick up in: " ++ $.name ++ ", " ++ $.address.streetLine1 ++ ", " ++ $.address.city	 
})}
	]]></dw:set-variable>
					</dw:transform-message>
				</foreach>
				<dw:transform-message doc:name="Response Message">
					<dw:input-payload mimeType="application/java" />
					<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
  recipient:{
    id: flowVars.customerData.psid
  },
  message:{
    attachment:{
      type:"template",
      payload:{
        template_type: "receipt",
        recipient_name: "Stores for pickup",
        order_number: flowVars.lastOrder.orderId,
        currency:"USD",
        payment_method:"Anypoint Bank",             
        summary:{
          subtotal: flowVars.lastOrder.subtotal,
          shipping_cost: flowVars.lastOrder.shippingCost,
          total_tax: flowVars.lastOrder.totalTax,
          total_cost: flowVars.lastOrder.total
        },
        elements: flowVars.listItems map
          {
            title: $.productName,
            subtitle: $.locationDetails,
            quantity: $.quantity as :number, 
            price: $.price as :number, 
            currency:"USD"
          }
      }
    }
  }
}]]></dw:set-payload>
				</dw:transform-message>
			</otherwise>
		</choice>

		<logger level="INFO" doc:name="Logger" message="#[payload]" />
	</flow>

	<flow name="order-response">
		<logger level="DEBUG" doc:name="Log webhook data"
			message="#[message.payloadAs(java.lang.String)]" />
		<set-variable variableName="input" value="#[payload]"
			doc:name="save to var input" />
		<set-variable variableName="psid"
			value="#[payload.entry[0].messaging[0].sender.id]" doc:name="var psid" />
		<objectstore:contains config-ref="application_data"
			key="#[flowVars.psid]" doc:name="Check presence of customer data by PSID" />
		<choice doc:name="Is messenger user record present?">
			<when expression="#[payload == true]">
				<objectstore:retrieve config-ref="application_data"
					key="#[flowVars.psid]" targetProperty="customerData"
					doc:name="Retrieve by PSID to var customerData" />

				<flow-ref name="create-orders-response" doc:name="create-orders-response" />
				<dw:transform-message doc:name="Reply">
					<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	recipient: {
		id: flowVars.psid
	},
	message: {
		  
	      text:  "Is there anything else I can help you with?"
	      		
	}
}]]></dw:set-payload>
				</dw:transform-message>
			</when>
			<otherwise>
				<logger level="INFO" doc:name="User must login first"
					message="Going to log in user" />
				<dw:transform-message doc:name="Reply with login link">
					<dw:set-payload><![CDATA[%dw 1.0
%output application/json
%var stateRaw = {
	psid: flowVars.input.entry.messaging[0].sender.id[0],
	action: "order"
}
%var stateString = write(stateRaw, "application/json")
%var stateBase64UrlEncoded = encode64(stateString)
%var loginUrl = p('user.login.url')
---
{
	recipient: {
		id: flowVars.input.entry.messaging[0].sender.id[0]
	},
	message:{
    	attachment:{
			type:"template",
			payload:{
			    template_type:"button",
				text: "Please provide information about your user following the link below.",
				buttons:[{
			    	"type":"web_url",
					"url":"$(loginUrl)?origin=bot&state=$(stateBase64UrlEncoded)",
					"title":"Login"
			    }]
			}
    	}
    }
}]]></dw:set-payload>
				</dw:transform-message>
			</otherwise>
		</choice>
	</flow>
	<flow name="list-response">
		<dw:transform-message doc:name="Response Message">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	recipient: {
		id: flowVars.customerData.psid
	},
	message: {
	      text: "Here is your last order:\n"
	}
}]]></dw:set-payload>
		</dw:transform-message>
		<http:request config-ref="Call_Send_API_Request_Configuration"
			path="me/messages" method="POST" doc:name="Call Facebook Send API">
			<http:request-builder>
				<http:query-param paramName="access_token" value="${access_token}" />
			</http:request-builder>
		</http:request>
		<logger message="#[payload:java.lang.String]" level="DEBUG"
			doc:name="Log FB response" />
	</flow>
	<flow name="logout-response">
		<set-variable variableName="input" value="#[payload]"
			doc:name="save to var input" />
		<set-variable variableName="psid"
			value="#[payload.entry[0].messaging[0].sender.id]" doc:name="var psid" />
		<objectstore:remove config-ref="application_data"
			doc:name="ObjectStore" key="#[flowVars.psid]" ignoreNotExists="true"
			doc:description="Remove entry for user if exists." />
		<dw:transform-message doc:name="Reply with login link">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/json
%var stateRaw = {
	psid: flowVars.input.entry.messaging[0].sender.id[0],
	action: "logout"
}
%var stateString = write(stateRaw, "application/json")
%var stateBase64UrlEncoded = encode64(stateString)
%var loginUrl = p('user.login.url')
---
{
	recipient: {
		id: flowVars.input.entry.messaging[0].sender.id[0]
	},
	message:{
    	attachment:{
			type:"template",
			payload:{
			    template_type:"button",
				text: "Please provide information about your user following the link below.",
				buttons:[{
			    	"type":"web_url",
					"url":"$(loginUrl)?origin=bot&state=$(stateBase64UrlEncoded)",
					"title":"Login or Change user"
			    }]
			}
    	}
    }
}]]></dw:set-payload>
		</dw:transform-message>
	</flow>


	<flow name="facebook-bot-site">
		<http:listener config-ref="HTTPS_Listener_Configuration"
			path="/" doc:name="HTTP" />
		<logger message="#[payload]" level="DEBUG" doc:name="Log input" />
		<set-payload value="Hello Facebook Bot!" doc:name="Set Payload" />
	</flow>






</mule>
