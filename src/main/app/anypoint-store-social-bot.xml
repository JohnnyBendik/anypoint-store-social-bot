<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:cors="http://www.mulesoft.org/schema/mule/cors"  
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
	xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" 
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/cors http://www.mulesoft.org/schema/mule/cors/current/mule-cors.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
    
    <http:listener-config name="HTTPS_Listener_Configuration"      host="0.0.0.0" port="${https.port}" doc:name="HTTP Listener Configuration" >
<!--         <tls:context> -->
<!--             <tls:key-store type="jks" path="${keystore.location}" keyPassword="${key.password}" password="${keystore.password}" alias= "${key.alias}"/> -->
<!--         </tls:context> -->
    </http:listener-config>
    <http:request-config name="Call_Send_API_Request_Configuration" protocol="HTTPS" host="graph.facebook.com" port="443" doc:name="HTTP Request Configuration" basePath="/">
<!--         <tls:context> -->
<!--             <tls:key-store type="jks" path="${keystore.location}" keyPassword="${key.password}" password="${keystore.password}" alias= "${key.alias}"/> -->
<!--         </tls:context> -->
    </http:request-config>
    
    <http:request-config name="Omnichannel_Request_Configuration" doc:name="HTTP Request Configuration"
	    host="${omni-experience-api.host}" 
	    port="${omni-experience-api.port}" 
	    basePath="${omni-experience-api.baseUrl}" /> 
	    
    <context:property-placeholder location="common.properties,mule.${mule.env}.properties"/>
    
    <objectstore:config name="application_data" partition="_defaultUserObjectStore" persistent="true" objectStore-ref="_defaultUserObjectStore" doc:name="ObjectStore: Connector"/>
    
    
    <configuration doc:name="Configuration">
     <expression-language>
         <global-functions>
             def decode64(value) {
             	 byte[] decoded = java.util.Base64.getUrlDecoder()
                                                  .decode(value);
             	 return new String(decoded, "UTF-8");
             }
             
             def encode64(value) {
                 return java.util.Base64.getUrlEncoder()
                                        .withoutPadding()
                                        .encodeToString(value.getBytes("UTF-8"));
             }
             
             def toUrlSafeCustomerId(value) {
                 return value.replace('|', '_');
             }
         </global-functions>
     </expression-language>
 </configuration>
    
    <cors:config name="Cors_Configuration" doc:name="Cors Configuration">
	<cors:origins>
		<cors:origin url="*" accessControlMaxAge="30">
			<cors:methods>
				<cors:method>GET</cors:method>
				<cors:method>POST</cors:method>
				<cors:method>OPTIONS</cors:method>
			</cors:methods>
<!-- 			<cors:headers> -->
<!-- 				<cors:header>Origin</cors:header> -->
<!-- 			</cors:headers> -->
		</cors:origin>
	</cors:origins>
</cors:config>

    <flow name="webhook-flow">
        <http:listener config-ref="HTTPS_Listener_Configuration" path="/webhook" doc:name="/webhook"/>
        <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Log input"/>
        <choice doc:name="Operation?">
            <when expression="#[message.inboundProperties.'http.method' == 'POST']">
                <dw:transform-message doc:name="transform input to java">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
                </dw:transform-message>
                <choice doc:name="Choice">
                    <when expression="#[!(payload.entry[0].messaging[0].message == null)]">
                        <choice doc:name="What action to perform?">
                            <when expression="#[payload.entry[0].messaging[0].message.text.contains(&quot;order&quot;)]">
                                <flow-ref name="order-response" doc:name="order-response"/>
                            </when>
                            <when expression="#[payload.entry[0].messaging[0].message.text.contains(&quot;Hi&quot;)]">
                                <flow-ref name="greeting-response" doc:name="greeting-response"/>
                            </when>
                            <otherwise>
                                <flow-ref name="echo-response" doc:name="echo-response"/>
                            </otherwise>
                        </choice>
                        <logger message="#[payload:java.lang.String]" level="INFO" doc:name="Logger"/>
                        <http:request config-ref="Call_Send_API_Request_Configuration" path="me/messages" method="POST" doc:name="Call Facebook Send API">
                            <http:request-builder>
                                <http:query-param paramName="access_token" value="${access_token}"/>
                            </http:request-builder>
                        </http:request>
                        <logger message="#[payload:java.lang.String]" level="INFO" doc:name="Logger"/>
                    </when>
                    <otherwise>
                        <logger message="POSTBACK - #[payload]" level="INFO" doc:name="Logger"/>
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <set-payload value="#[message.inboundProperties.'http.query.params'.['hub.challenge']]" doc:name=" Respond with challenge"/>
            </otherwise>
        </choice>
        
    </flow>
    <flow name="after-login-flow">
        <http:listener config-ref="HTTPS_Listener_Configuration" path="/callback" doc:name="HTTP" allowedMethods="GET,OPTIONS,POST"/>
        <cors:validate config-ref="Cors_Configuration" publicResource="true" acceptsCredentials="false" doc:name="CORS Validate"/>
        <json:json-to-object-transformer returnClass="java.util.Map" doc:name="JSON to Object" mimeType="application/java"/>
        <logger  level="INFO" doc:name="Log input" message="#[message.payloadAs(java.lang.String)]"/>
        <dw:transform-message doc:name="extract useful data">
            <dw:input-payload doc:sample="sample_data/json.json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%var accessTokenPayloadBase64UrlEncoded = (payload.access_token splitBy '.')[1]
%var accessTokenPayloadString = decode64(accessTokenPayloadBase64UrlEncoded)
%var accessTokenPayload = read(accessTokenPayloadString, 'application/json')

%var idTokenPayloadBase64UrlEncoded = (payload.id_token splitBy '.')[1]
%var idTokenPayloadString = decode64(idTokenPayloadBase64UrlEncoded)
%var idTokenPayload = read(idTokenPayloadString, 'application/json')
---
{
	customerId: toUrlSafeCustomerId(accessTokenPayload.sub),
	psid: read(decode64(payload.state), 'application/json').psid,
	action: read(decode64(payload.state), 'application/json').action,
	accessToken: payload.access_token,
	name: idTokenPayload.name,
	givenName: idTokenPayload.given_name,
	lastName: idTokenPayload.family_name
	
}]]></dw:set-payload>
        </dw:transform-message>
        <objectstore:store config-ref="application_data" key="#[payload.psid]" value-ref="#[dw(' payload - &quot;action&quot; ')]" overwrite="true" doc:name="save customerId under psid key"/>
        <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Find real order info as we now have customerId"/>
        <dw:transform-message doc:name="Prepare message to send to FB">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	recipient: {
		id: payload.psid
	},
	message: {
		text: "Thank you for linking your account, let me now show you your last order..."
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="Call_Send_API_Request_Configuration" path="me/messages" method="POST" doc:name="Call Facebook Send API">
            <http:request-builder>
                <http:query-param paramName="access_token" value="${access_token}"/>
            </http:request-builder>
        </http:request>
    </flow>
    <flow name="echo-response">
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <dw:transform-message doc:name="Response Message" >
            <dw:input-payload mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	recipient: {
		id: payload.entry.messaging[0].sender.id[0]
	},
	message: {
		text: "If you want to see your orders, please write keyword:  order." when payload.entry.messaging[0].message.text[0] !=null otherwise 'No Message'
	}
}]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    <flow name="greeting-response">
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <dw:transform-message doc:name="Response Message">
            <dw:input-payload mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	recipient: {
		id: payload.entry.messaging[0].sender.id[0]
	},
	message: {
		text: "Hi, How can we help you today?" when payload.entry.messaging[0].message.text[0] !=null otherwise 'No Message'
	}
}]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    <flow name="orders-response-mocked">
		<set-variable variableName="input" value="#[payload]" doc:name="Variable"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <flow-ref name="delivery-response" doc:name="delivery-response"/>
        <flow-ref name="list-response" doc:name="list-response"/>


        <http:request config-ref="Omnichannel_Request_Configuration" path="/customers/{customerId}/orders" method="GET" doc:name="GET /customers/{customerId}/orders">
            <http:request-builder>
                <http:uri-param paramName="customerId" value="${orders.customerId}"/>

            </http:request-builder>
        </http:request>


        <dw:transform-message doc:name="intermediate mapping">
            <dw:input-payload/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
using(order = payload[0])
{
	orderId: order.id,
	totalPrice: order.price,
	products: order.orderItems map {
		variantId: $.orderItemId,
		(productId: "eb8c8ca7-3c42-4489-a820-3aa138430b75" when ($.orderItemId == "88668866-2c6d-4fa6-9e17-4b2c42e0f051") otherwise {
				productId: "cd67cd8a-8901-48c5-890b-0a21f4a0f8ad"
			}),
		productName: $.productName,
		quantity: $.quantity
	}
	
	
}
]]></dw:set-payload>
            <dw:set-variable variableName="totalPrice"><![CDATA[%dw 1.0
%output application/json
---
{
	totalPrice: payload[0].price
}]]></dw:set-variable>
        </dw:transform-message>

        <logger message="#[payload:java.lang.String]" level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Response Message" >
        <dw:input-payload doc:sample="messageData.json" mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	recipient: {
		id: flowVars.input.entry.messaging[0].sender.id[0]
	},
	message:{
      attachment: {
			type: "template",
			payload: {
				template_type: "list",
				top_element_style: "compact",
				elements: payload.products map
					{
						title: $.productName,
						subtitle: "Quantity: $($.quantity)",
						buttons: [{
							title: "Product Details",
							type: "web_url",
							url: p('anypoint.store.url') ++ "/product/" ++ $.productId,
							webview_height_ratio: "tall"
							}]
					}			
			}
		}
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="Call_Send_API_Request_Configuration" path="me/messages" method="POST" doc:name="Call Facebook Send API">
            <http:request-builder>
                <http:query-param paramName="access_token" value="${access_token}"/>
            </http:request-builder>
        </http:request>
        <set-payload value="#[flowVars.totalPrice]" doc:name="Set Payload"/>

        <dw:transform-message doc:name="Response message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	recipient: {
		id: flowVars.input.entry.messaging[0].sender.id[0]
	},
	message: {
		  
	      text: 
	      		"\nTotal Price: $(payload.totalPrice) USD"
		
	}
}]]></dw:set-payload>
        </dw:transform-message>
		
    </flow>
    <flow name="delivery-response">
        <http:request config-ref="Omnichannel_Request_Configuration" path="customers/{customerId}" method="GET" doc:name="GET/customers/{customerId}">
            <http:request-builder>
                <http:uri-param paramName="customerId" value="${orders.customerId}"/>


            </http:request-builder>
        </http:request>
        <logger message="#[payload:java.lang.String]" level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="intermediate mapping">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload.deliveryAddresses filter ($.type == 'SHIPPING') map {	
	address: $.address ++ "\n" 
	++ $.postalCode ++ ", " ++ $.city ++ "\n" ++ 
    $.state ++ "," ++ $.country
}
]]></dw:set-payload>
        </dw:transform-message>

        <dw:transform-message doc:name="Response Message" >
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	recipient: {
		id: flowVars.input.entry.messaging[0].sender.id[0]
	},
	message: {
		  
	      text: 
	      		"Here are your order details:\n\n" ++
	      		"Arriving: " ++ 
	      		(now + |P2D|) as :string {format: "EEEE, MMM d"} ++
				"\n" ++
	      		"Carrier: USPS\n" ++
	      		"Shipped to:\n" ++
	      		 "$(payload[0].address)"
		
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="Call_Send_API_Request_Configuration" path="me/messages" method="POST" doc:name="Call Facebook Send API">
            <http:request-builder>
                <http:query-param paramName="access_token" value="${access_token}"/>
            </http:request-builder>
        </http:request>
        <logger message="#[payload:java.lang.String]" level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="list-response">
        <dw:transform-message doc:name="Response Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	recipient: {
		id: flowVars.input.entry.messaging[0].sender.id[0]
	},
	message: {
	      text: "Below is the list of ordered products:\n"
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="Call_Send_API_Request_Configuration" path="me/messages" method="POST" doc:name="Call Facebook Send API">
            <http:request-builder>
                <http:query-param paramName="access_token" value="${access_token}"/>
            </http:request-builder>
        </http:request>
        <logger message="#[payload:java.lang.String]" level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="order-response">
        <logger level="INFO" doc:name="payload contains webhook data" message="#[message.payloadAs(java.lang.String)]"/>
        <set-variable variableName="input" value="#[payload]" doc:name="save to var input"/>
        <set-variable variableName="psid" value="#[payload.entry[0].messaging[0].sender.id]" doc:name="var psid"/>
        <objectstore:contains config-ref="application_data" key="#[flowVars.psid]" doc:name="Check presence of customer data by PSID"/>
        <choice doc:name="Is messenger user record present?">
            <when expression="#[payload == true]">
                <objectstore:retrieve config-ref="application_data" key="#[flowVars.psid]" targetProperty="customerData" doc:name="Retrieve by PSID to var customerData"/>
                <dw:transform-message doc:name="Reply with order (to do)">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	recipient: {
		id: flowVars.input.entry.messaging[0].sender.id[0]
	},
	message: {
		  
	      text: "Now I'm going to show you your orders"
	      		
		
	}
}]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <otherwise>
                <logger level="INFO" doc:name="User must login first"/>
                <set-variable variableName="state" value="#[java.util.Base64.getUrlEncoder().encodeToString('{&quot;psid&quot;:&quot;12345&quot;,&quot;action&quot;:&quot;order&quot;}'.getBytes(&quot;UTF-8&quot;))]" doc:name="var state"/>
                <dw:transform-message doc:name="Reply with login link">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%var stateRaw = {
	psid: flowVars.input.entry.messaging[0].sender.id[0],
	action: "order"
}
%var stateString = write(stateRaw, "application/json")
%var stateBase64UrlEncoded = encode64(stateString)
%var loginUrl = p('user.login.url')
---
{
	recipient: {
		id: flowVars.input.entry.messaging[0].sender.id[0]
	},
	message: {
		  
	      text: "Sure, for this action though you must login to Aypoint Store first.\n" ++ 
	      "Please follow this link: $(loginUrl)?origin=bot&state=$(stateBase64UrlEncoded)"
	      		
		
	}
}]]></dw:set-payload>
                </dw:transform-message>
<!--                 <http:request config-ref="Call_Send_API_Request_Configuration" path="me/messages" method="POST" doc:name="Send login link"> -->
<!--                     <http:request-builder> -->
<!--                         <http:query-param paramName="access_token" value="${access_token}"/> -->
<!--                     </http:request-builder> -->
<!--                 </http:request> -->
            </otherwise>
        </choice>
    </flow>

	<flow name="facebook-bot-site">
        <http:listener config-ref="HTTPS_Listener_Configuration" path="/" doc:name="HTTP"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <set-payload value="Hello Facebook Bot!" doc:name="Set Payload"/>
    </flow>




</mule>
